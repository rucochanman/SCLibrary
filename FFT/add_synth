s.options.memSize = 8192*4;
s.reboot;

p = "/***.wav";
w = Buffer.read(s, p, 14950, 2048*16);
w.play
w.free
w.numFrames

//////////////
//clear
(
OSCdef(\send).disable;
OSCdef(\send).enable;
b.free;
c.free;
)
//////////////

//fftする
~buffersize = 1024;
(
b = Buffer.alloc(s, ~buffersize, 1);
c = Bus.control(s, ~buffersize);

SynthDef(\fft, {
var in, chain, stream, windowStarts, out;
	in = PlayBuf.ar(1, w, BufRateScale.kr(w), loop:0, doneAction:2);
	chain = FFT(b, in);
	stream = UnpackFFT(
		chain, ~buffersize, frombin:0, tobin:~buffersize/2);
	windowStarts = chain > -1;
	out = Demand.kr(windowStarts, 0, stream);
	Out.kr(c, out);
	SendTrig.kr(windowStarts,0,1);
}).add;

~fftArray = [];
OSCdef(\send, { arg msg, time;
	~fftArray = ~fftArray.add(c.getnSynchronous(~buffersize));
},'/tr', s.addr);
)

Synth(\fft);
~fftArray.size

//////////////
//~fft array を並び替え
(
 var temp = [];
 y = []; x = [];
 ~fftArray.size.do({ |i|
	temp = temp.add(~fftArray[i].clump(2).flop);
 });

 ~fftArray.size.do({ |i|
	y = y.add(temp[i][0]);
	x = x.add(temp[i][1]);
 });
)

y[12].plot
y[0].size
//////////////

//dictionaryに登録
d = Dictionary();
d.put(\ain_y, y);
d.put(\ain_x, x);

//buffer にsine fill
g.free;
g = Buffer.alloc(s, ~buffersize/2, 1);
g.sine3((0..(~buffersize/2))/4, d.at(\ain_y)[10], d.at(\ain_x)[10]);

//鳴らす
(
SynthDef(\addSynth, {
	var sn, vib;
	vib = FSinOsc.ar(\vFreq.kr(4), 0, \vAmp.kr(2));
	sn = Osc.ar(g, \freq.kr(440)+vib, 0, \amp.kr(0.5));
    sn = OnePole.ar(sn, 0.5);
	Out.ar(0, sn);
}).add;
)

x = Synth(\addSynth);


//toscaから受信
y = Array.interpolation(100, d.at(\ain_y)[0], d.at(\ain_y)[30]);
x = Array.interpolation(100, d.at(\ain_x)[0], d.at(\ain_x)[30]);
g.sine3((0..(~buffersize/2))/4, y, x);

OSCFunc.trace(false)
OSCFunc.trace(true)
1.5.round.asInteger

Env

~ainHead = 0;
~ainEnd = 30;

(
OSCdef(\param1, { arg msg;
	var index = msg[1].round.asInteger;
	var y = Array.interpolation(100, d.at(\ain_y)[~ainHead], d.at(\ain_y));
    var x = Array.interpolation(100, d.at(\ain_x)[~ainHead], d.at(\ain_x));
},'/2/ain');
)
(
OSCdef(\param2, { arg msg;
	//msg[1].round.asInteger.postln;
	~ainHead = msg[1].round.asInteger;
},'/2/start');
)

OSCdef(\param1).disable
OSCdef(\param1).enable





//g更新テスト
(
{
6300.do({ |i|
g.sine3((0..511)/4, t[i], ~t2[i]);
0.005.wait;
});
}.fork
)


//間を補間する
(
~ty = [];
63.do({|i|
~ty = ~ty.add(Array.interpolation(100, y[i], y[i+1]));
});
)
t = t.flat.clump(512)
t.size

(
~t2 = [];
63.do({|i|
~t2 = ~t2.add(Array.interpolation(100, x[i], x[i+1]));
});
)
~t2 = ~t2.flat.clump(512)
~t2.size





