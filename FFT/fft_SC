s.options.memSize
s.options.memSize = 8192*4;
s.reboot

(
var buffersize = 1024;
w = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");
b = Buffer.alloc(s, buffersize, 1);
c = Bus.control(s, buffersize);
~fftArray = [];

SynthDef(\avTrk2, {
  var in, chain, stream, windowStarts, out;
  in = PlayBuf.ar(
		1, w, BufRateScale.kr(w), loop:0, doneAction:2);
    chain = FFT(b, in);
	stream = UnpackFFT(
		chain, buffersize, frombin:0, tobin:buffersize/2);
	windowStarts = chain > -1;
	out = Demand.kr(windowStarts, 0, stream);
	Out.kr(c, out);
	SendTrig.kr(windowStarts,0,1);
}).add;

// register to receive this message
o = OSCFunc({ arg msg, time;
	~fftArray = ~fftArray.add(c.getnSynchronous(buffersize));
},'/tr', s.addr);
)
o.free

Synth(\avTrk2);
~fftArray.size

//~fft array を並び替え
(
var temp = [];
~fftArray.size.do({ |i|
	temp = temp.add(~fftArray[i].clump(2).flop);
});

~fftArray.size.do({ |i|
	y = y.add(temp[i][0]);
	x = x.add(temp[i][1]);
});
)

//scaling
z = y.flatten
z = z / z.maxItem
z = z.clump(512)

//send osc
n = NetAddr.new("127.0.0.1", 10000);
(
Task({
  y.size.do({ |i|
  n.sendMsg("/pattern", *(z[i]));
  0.1.wait;
  })
}).play
)

//read csv
t = [];
(
t = CSVFileReader.read("/path/***.csv", true, true);
t = t.asFloat;
t = t * z.maxItem;
)

//ifft
(
SynthDef(\ifft, {
  var magbuf, phabuf, chain, sig, windowStarts, mags, phases;
  chain = FFT(LocalBuf(1024), FSinOsc.ar);
	windowStarts = chain > -1;
	mags = Demand.kr(windowStarts, 0, Dseq(t,inf));
	phases = Demand.kr(windowStarts, 0, Dseq(x,inf));
  chain = PackFFT(chain, 512, [mags, phases].flop.flatten, 0, 512, 1);
  sig = IFFT(chain);
	Out.ar(0, sig.dup);
}).add;
)

Synth(\ifft);
