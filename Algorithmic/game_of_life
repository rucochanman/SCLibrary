int cellNum = 50;
int cellSize;
color alive = color(0, 200, 0);
int[][] cells = new int[cellNum][cellNum];
int[][] neighbours = 
{{-1, -1}, {0, -1}, {1, -1},
 {-1, 0}, {1, 0},
 {-1, 1}, {0, 1}, {1, 1}
};

void setup(){
  size(250, 250);
  frameRate(5);
  noSmooth();
  int probabilityOfAliveAtStart = 5;
  cellSize = width / cellNum;
  
  // Initialization of cells
  for (int x=0; x<cellNum; x++) {
    for (int y=0; y<cellNum; y++) {
      float state = random (10);
      if (state > probabilityOfAliveAtStart) { 
        state = 0;
      }
      else {
        state = 1;
      }
      cells[x][y] = int(state);
    }
  }
  
  
}

void draw(){

  
  
  int[][] new_cells = new int[cellNum][cellNum];
  for (int x=0; x<cellNum; x++) {
    for (int y=0; y<cellNum; y++) {
      int count = 0;
      
      //check neighbours
      for (int i=0; i<neighbours.length; i++) {
        if(x+neighbours[i][0]<0 || x+neighbours[i][0]>cellNum-1 || 
        y+neighbours[i][1]<0 || y+neighbours[i][1]>cellNum-1 ){
          //pass
        }else{
          if(cells[x+neighbours[i][0]][y+neighbours[i][1]] == 1){
            count++;
          }
        }
      }
      
      //generate
      if(x == 5 && y == 5){println(count);}
      if(count<=1 || count>3){
        new_cells[x][y] = 0;
      }else if(count==2 && cells[x][y]==1){
        new_cells[x][y] = 1;
      }else if(count==3){
        new_cells[x][y] = 1;
      }else{
        new_cells[x][y] = 0;
      }
      
      
    }
  }
  

  for (int x=0; x<cellNum; x++) {
    for (int y=0; y<cellNum; y++) {
      if(new_cells[x][y]==1){
        if(x == 5 && y == 5){alive = color(200, 0, 0);}else{alive = color(0, 200, 0);}
          fill(alive);
      }else{
          fill(0);
      }
      rect(x*cellSize, y*cellSize, cellSize, cellSize);
      cells[x][y] = new_cells[x][y];
    }
  }


}




